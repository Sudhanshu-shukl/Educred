const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-4dSMX-rY.js","assets/index-Ch0Y1xiN.css"])))=>i.map(i=>d[i]);
import{cX as m,B as c,cf as g,h as l,am as d}from"./index-4dSMX-rY.js";import{a as _,C as w}from"./setErc20Allowance-bae9b83c.browser.esm-BpTPtwxZ.js";const y=m("0x80ac58cd"),C=m("0xd9b67a26"),E={name:"Failed to load NFT metadata"};async function R(t,a,e){if(a.startsWith("data:application/json;base64")&&typeof Buffer<"u"){const i=a.split(",")[1],s=JSON.parse(Buffer.from(i,"base64").toString("utf-8"));return _.parse({...s,id:c.from(t).toString(),uri:a})}const r=a.replace("{id}",g(c.from(t).toHexString(),32).slice(2));let n;try{n=await e.downloadJSON(r)}catch{const s=a.replace("{id}",c.from(t).toString());try{n=await e.downloadJSON(s)}catch{console.warn(`failed to get token metadata: ${JSON.stringify({tokenId:t.toString(),tokenUri:a})} -- falling back to default metadata`),n=E}}return _.parse({...n,id:c.from(t).toString(),uri:a})}async function F(t,a,e,r){let n;const i=(await l(async()=>{const{default:o}=await import("./IERC165-bKJSsN7u.js");return{default:o}},[])).default,s=new d(t,i,a),[p,h]=await Promise.all([s.supportsInterface(y),s.supportsInterface(C)]);if(p){const o=(await l(async()=>{const{default:f}=await import("./index-4dSMX-rY.js").then(u=>u.it);return{default:f}},__vite__mapDeps([0,1]))).default;n=await new d(t,o,a).tokenURI(e)}else if(h){const o=(await l(async()=>{const{default:f}=await import("./index-4dSMX-rY.js").then(u=>u.iv);return{default:f}},__vite__mapDeps([0,1]))).default;n=await new d(t,o,a).uri(e)}else throw Error("Contract must implement ERC 1155 or ERC 721.");return n?R(e,n,r):_.parse({...E,id:c.from(e).toString(),uri:""})}async function S(t,a){return typeof t=="string"?t:await a.upload(w.parse(t))}async function A(t,a,e,r){if(I(t))return t;if(T(t))return await a.uploadBatch(t.map(i=>w.parse(i)),{rewriteFileNames:{fileStartNumber:e||0},onProgress:r==null?void 0:r.onProgress});throw new Error("NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)")}function x(t){const a=t[0].substring(0,t[0].lastIndexOf("/"));for(let e=0;e<t.length;e++){const r=t[e].substring(0,t[e].lastIndexOf("/"));if(a!==r)throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${a}' but got '${r}'`)}return a.replace(/\/$/,"")+"/"}function I(t){return t.find(a=>typeof a!="string")===void 0}function T(t){return t.find(a=>typeof a!="object")===void 0}const L=100;export{L as D,E as F,y as I,R as a,S as b,C as c,F as f,x as g,A as u};
